<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en" xml:id="bitmanip">
<info>
<title>RISC-V Bit-Manipulation ISA-extensions</title>
<date>2023-08-07</date>
<revhistory>
<revision>
<revnumber>a8d5489-dirty</revnumber>
<date>2023-08-07</date>
<revremark>This document is in the Frozen state. Change is extremely unlikely. A high threshold will be used, and a change will only occur because of some truly critical issue being identified during the public review cycle. Any other desired or needed changes can be the subject of a follow-on new extension.</revremark>
</revision>
</revhistory>
</info>
<colophon xml:id="_colophon">
<title>Colophon</title>
<simpara>This document is released under the <link xl:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</link>.</simpara>
<simpara>It describes the BitManip Zba, Zbb, Zbc and Zbs extensions being submitted for public review.</simpara>
</colophon>
<acknowledgments xml:id="_acknowledgments">
<title>Acknowledgments</title>
<simpara>Contributors to this specification (in alphabetical order) include:<?asciidoc-br?>
Jacob Bachmeyer,
Allen Baum,
Ari Ben,
Alex Bradbury,
Steven Braeger,
Rogier Brussee,
Michael Clark,
Ken Dockser,
Paul Donahue,
Dennis Ferguson,
Fabian Giesen,
John Hauser,
Robert Henry,
Bruce Hoult,
Po-wei Huang,
Ben Marshall,
Rex McCrary,
Lee Moore,
Jiří Moravec,
Samuel Neves,
Markus Oberhumer,
Christopher Olson,
Nils Pipenbrinck,
Joseph Rahmeh,
Xue Saw,
Tommy Thorn,
Philipp Tomsich,
Avishai Tvila,
Andrew Waterman,
Thomas Wicki, and
Claire Wolf.</simpara>
<simpara>We express our gratitude to everyone that contributed to, reviewed or
improved this specification through their comments and questions.</simpara>
</acknowledgments>
<preface xml:id="_ビットマニピュレーションabcs拡張の公開レビューと批准のためのグループ化">
<title>ビットマニピュレーションa、b、c、s拡張の公開レビューと批准のためのグループ化</title>
<simpara>ビットマニピュレーション(bitmanip)拡張は、ベースとなるRISC-Vアーキテクチャに対するいくつかのコンポーネント拡張で構成され、コードサイズの削減、性能向上、エネルギー削減の組み合わせを提供することを目的としている。
これらの命令は一般的に使用されることを意図しているが、いくつかの命令は他の命令よりもある領域で有用である。
そのため、1つの大きな拡張ではなく、いくつかの小さなbitmanip拡張が提供されている。
これらの小さな拡張はそれぞれ共通の機能と使用例によってグループ化され、それぞれ独自のZb*拡張名を持っている。</simpara>
<simpara>各 bitmanip 拡張は、同じような目的を持ち、しばしば同じロジックを共有することができるいくつかの bitmanip 命令のグループを含む。
いくつかの命令は1つの拡張子で利用可能であり、他の命令は複数の拡張子で利用可能である。
命令は、それらが現れる拡張に依存しないニーモニックとエンコーディングを持つ。
したがって、重複する命令を持つ拡張機能を実装する場合、ロジックやエンコーディングに冗長性はない。</simpara>
<simpara>bitmanip拡張はRV32とRV64用に定義されている。
ほとんどの命令はRV128と前方互換性があると予想される。
シフト即値命令は最大6ビットの即値フィールドを持つように定義されているが、RV128で必要とされる場合には、エンコード空間に7ビット目が用意されている。</simpara>
</preface>
<preface xml:id="_ワード命令">
<title>ワード命令</title>
<simpara>bitmanip拡張は、 <emphasis>w</emphasis> 付き命令 ( _w_の前にドットがない)は入力の上位32ビットを無視し、最下位32ビットを符号付き値として演算し、符号をXLENに拡張した32ビットの符号付き結果を生成するというRV64の慣例に従っている。</simpara>
<simpara>接尾辞が <emphasis>.uw</emphasis> の Bitmanip 命令は、指定されたレジスタの最下位 32 ビットから抽出された符号なし 32 ビット値をオペランドとして持つ。
それ以外は、完全なXLEN演算を行う。</simpara>
<simpara>接尾辞 <emphasis>.b</emphasis> , <emphasis>.h</emphasis> , <emphasis>.w</emphasis> を持つbitmanip命令は、入力の最下位 8 ビット、16 ビット、32 ビット（それぞれ）のみを参照し、符号拡張された XLEN幅の結果を生成する。
この結果は、特定の命令に基づいて符号拡張またはゼロ拡張される。</simpara>
</preface>
<preface xml:id="_命令セマンティクスのための疑似コード">
<title>命令セマンティクスのための疑似コード</title>
<simpara><xref linkend="insns"/> で記述される各命令のセマンティクスは、SAILの構文で記述される。</simpara>
</preface>
<chapter xml:id="_extensions">
<title>Extensions</title>
<simpara>パブリック・レビューとして後悔されたbitmanipの最初のグループは以下である。</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="zba"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="zbb"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="zbc"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="zbs"/></simpara>
</listitem>
</itemizedlist>
<simpara>以下は、これらの拡張に含まれるすべての命令(および擬似命令)のリストとそのマッピングの一覧である:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="8">
<colspec colname="col_1" colwidth="7.5*"/>
<colspec colname="col_2" colwidth="7.5*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="40*"/>
<colspec colname="col_5" colwidth="5*"/>
<colspec colname="col_6" colwidth="5*"/>
<colspec colname="col_7" colwidth="5*"/>
<colspec colname="col_8" colwidth="5*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
<entry align="center" valign="top">Zba</entry>
<entry align="center" valign="top">Zbb</entry>
<entry align="center" valign="top">Zbc</entry>
<entry align="center" valign="top">Zbs</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-add_uw"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>andn <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-andn"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmul <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmul"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmulh <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmulh"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmulr <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmulr"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clz <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clz"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clzw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clzw"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>cpop <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-cpop"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>cpopw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-cpopw"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ctz <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ctz"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ctzw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ctzw"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>max <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-max"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>maxu <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-maxu"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>min <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-min"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>minu <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-minu"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>orc.b <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-orc_b"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>orn <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-orn"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rev8 <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rev8"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rol <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rol"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rolw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rolw"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ror <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ror"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rori <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rori"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>roriw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-roriw"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rorw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rorw"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bclr <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bclr"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bclri <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bclri"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bext <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bext"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bexti <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bexti"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>binv <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-binv"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>binvi <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-binvi"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bset <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bset"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bseti <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bseti"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sext.b <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sext_b"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sext.h <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sext_h"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh1add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh1add"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh1add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh1add_uw"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh2add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh2add"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh2add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh2add_uw"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh3add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh3add"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh3add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh3add_uw"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>slli.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-slli_uw"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>xnor <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-xnor"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>zext.h <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-zext_h"/></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>zext.w <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-add_uw"/></simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="zba" xreflabel="Address generation instructions">
<title>Zba extension</title>
<note>
<simpara>The Zba extension is frozen.</simpara>
</note>
<simpara>Zba命令は、符号なしワードサイズとXLENサイズの両方のインデックスを使用して、基本タイプ(ハーフワード、ワード、ダブルワード)の配列にインデックスを付けるアドレスの生成を高速化するために使用できる。</simpara>
<simpara>シフト命令と加算命令で1、2、3の左シフトを行うのは、実際のコードで一般的であり、単純な加算器以上の最小限の追加ハードウェアで実装できるからである。
これにより、実装におけるクリティカル・パスが長くなるのを避けることができる。</simpara>
<simpara>シフト命令と加算命令の最大左シフト数は3に制限されているが、(ベースISAの)slli 命令を使用すると、より広い要素の配列にインデックスを付けるために同様のシフトを実行できる。
このサブ拡張で追加されたslli.uwは、インデックスを符号なしワードとして解釈する場合に使用できる。</simpara>
<simpara>Zba拡張は以下の命令で構成されている:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-add_uw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh1add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh1add"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh1add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh1add_uw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh2add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh2add"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh2add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh2add_uw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh3add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh3add"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sh3add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sh3add_uw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>slli.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-slli_uw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>zext.w <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-add_uw"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="zbb" xreflabel="Basic bit-manipulation">
<title>Zbb: Basic bit-manipulation</title>
<note>
<simpara>Zbb拡張はFrozen状態である。</simpara>
</note>
<section xml:id="_否定付き論理演算命令">
<title>否定付き論理演算命令</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>andn <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-andn"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>orn <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-orn"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>xnor <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-xnor"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<title>Implementation Hint</title>
<simpara>The Logical with Negate instructions can be implemented by inverting the <emphasis>rs2</emphasis> inputs to the base-required AND, OR, and XOR logic instructions.
In some implementations, the inverter on rs2 used for subtraction can be reused for this purpose.</simpara>
</note>
</section>
<section xml:id="_leadingtrailing_ゼロビットカウント命令">
<title>Leading/Trailing ゼロビットカウント命令</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clz <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clz"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clzw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clzw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ctz <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ctz"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ctzw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ctzw"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_pop_count命令">
<title>Pop Count命令</title>
<simpara>これらの命令はセットされている(ビットが1)の数を数える。
これは一般的にPopulation Countと呼ばれている。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>cpop <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-cpop"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>cpopw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-cpopw"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_整数最大値最小値命令">
<title>整数最大値・最小値命令</title>
<simpara>整数最大値・最小値命令はR-typeの算術演算命令であり、
2つのオペランドの最大値・最小値を返す。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>max <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-max"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>maxu <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-maxu"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>min <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-min"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>minu <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-minu"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_符号拡張ゼロ拡張命令">
<title>符号拡張・ゼロ拡張命令</title>
<simpara>これらの命令はソース・レジスタの最下位8ビット、16ビット、32ビットを符号拡張もしくはゼロ拡張する。</simpara>
<simpara>これらの命令は、8ビットおよび16ビットのゼロ拡張時は <literal>slli rD,rs,(XLEN-&lt;size&gt;) + srli</literal> 命令、
16ビットおよび32ビットの符号拡張時は <literal>slli + srai</literal> という一般的なイディオムとして置き換えることができる。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sext.b <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sext_b"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>sext.h <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-sext_h"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>zext.h <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-zext_h"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_ローテート命令">
<title>ローテート命令</title>
<simpara>ビット単位の回転命令は、基本仕様のシフト論理演算に似ている。
ただし、シフトがゼロをシフトするのに対し、ローテート命令は値の反対側にシフトされたビットをシフトする。
このような操作は&#8217;循環シフト&#8217;とも呼ばれる。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rol <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rol"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rolw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rolw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ror <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ror"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rori <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rori"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>roriw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-roriw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rorw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rorw"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<title>Architecture Explanation</title>
<simpara>The rotate instructions were included to replace a common
four-instruction sequence to achieve the same effect (neg; sll/srl; srl/sll; or)</simpara>
</note>
</section>
<section xml:id="_or組み合わせ命令">
<title>OR組み合わせ命令</title>
<simpara><emphasis role="strong">orc.b</emphasis> は、結果 <emphasis>rd</emphasis> の各バイトのビットを、 <emphasis>rs</emphasis> の各バ イト内のビットがセットされていなければすべてゼロに、 <emphasis>rs</emphasis> の各バ イト内のビットがセットされていればすべて1にセットする。</simpara>
<simpara>使用例としては、 <emphasis role="strong">strlen</emphasis> や <emphasis role="strong">strcpy</emphasis> のような文字列処理関数がある。
ワード内の非ゼロのバイトのセットビットをカウントすることで、終端ゼロバイトをテストすることができる。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>orc.b <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-orc_b"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_バイト逆転命令">
<title>バイト逆転命令</title>
<simpara><emphasis role="strong">rev8</emphasis> 命令は、 <emphasis>rs</emphasis> の倍との順序を逆転させる。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rev8 <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rev8"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="zbc" xreflabel="Carry-less multiplication">
<title>Zbc: キャリー無し乗算命令</title>
<note>
<simpara>Zbc拡張はFrozen状態である。</simpara>
</note>
<simpara>キャリー無し乗算はGF(2)上の多項式環における乗算である。</simpara>
<simpara><emphasis role="strong">clmul</emphasis> はキャリーレス積の下半分を生成し、 <emphasis role="strong">clmulh</emphasis> は 2&#x2715;XLEN キャリーレス積の上半分を生成する。</simpara>
<simpara><emphasis role="strong">clmulr</emphasis> は 2&#x2715;XLEN キャリーレス積のビット 2&#x2715;XLEN-2:XLEN-1 を生成する。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmul <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmul"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmulh <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmulh"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmulr <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmulr"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="zbs" xreflabel="Single-bit instructions">
<title>Zbs: 単一ビット命令</title>
<note>
<simpara>Zbc拡張はFrozen状態である。</simpara>
</note>
<simpara>シングルビット命令は、レジスタの単一ビットをセット、クリア、反転、または抽出するメカニズムを提供する。
ビットはインデックスで指定する。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bclr <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bclr"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bclri <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bclri"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bext <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bext"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bexti <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bexti"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>binv <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-binv"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>binvi <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-binvi"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bset <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bset"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>bseti <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>imm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-bseti"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="zbkc" xreflabel="Carry-less multiplication for Cryptography">
<title>Zbkc: 暗号向けキャリーレス乗算</title>
<note>
<simpara>Zbkc拡張はFrozen状態である。</simpara>
</note>
<simpara>キャリーレス乗算は、GF(2)上の多項式環における乗算である。
これはいくつかの暗号ワークロード、特にAES-GCM認証暗号化スキームにおいて重要な演算である。
この拡張は、このワークロードの一部であるGHASH演算を効率的に実装するために必要な命令のみを提供する。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmul <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmul"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>clmulh <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-clmulh"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="zbkx" xreflabel="Crossbar permutations">
<title>Zbkx: クロスバ組み合わせ命令</title>
<note>
<simpara>Zbkx拡張はFrozen状態である。</simpara>
</note>
<simpara>これらの命令は、汎用レジスタ内の4ビットと8ビットの要素に対して"ルックアップテーブル"を実装する。
<emphasis>rs1</emphasis> はNビット・ワードのベクトルとして使用され、 <emphasis>rs2</emphasis> は <emphasis>rs1</emphasis> へのNビット・インデックスのベクトルとして使用される。
<emphasis>rs1</emphasis> の要素は、 <emphasis>rs2</emphasis> のインデックス付き要素で置き換えられる。
<emphasis>rs2</emphasis> へのインデックスが範囲外の場合はゼロとなる。</simpara>
<simpara>これらの命令は、Nビット対Nビットのブーリアン演算を表現したり、実行レイテンシが演算対象の(秘密)データに依存しないような、
秘密に依存するメモリアクセス(特にSBox)を持つ暗号コードを実装したりするのに便利である。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>xperm.n <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-xpermn"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>xperm.b <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-xpermb"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="zbkb" xreflabel="Bit-manipulation for Cryptography">
<title>Zbkb: 暗号化向けビット操作命令</title>
<note>
<simpara>Zbkb拡張はFrozen状態である。</simpara>
</note>
<simpara>この拡張には、暗号ワークロードの実装の基本となる共通動作のための命令が含まれている。</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="7.1428*"/>
<colspec colname="col_2" colwidth="7.1428*"/>
<colspec colname="col_3" colwidth="28.5714*"/>
<colspec colname="col_4" colwidth="57.143*"/>
<thead>
<row>
<entry align="center" valign="top">RV32</entry>
<entry align="center" valign="top">RV64</entry>
<entry align="left" valign="top">Mnemonic</entry>
<entry align="left" valign="top">Instruction</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rol</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rol"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rolw</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rolw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>ror</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-ror"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rori</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rori"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>roriw</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-roriw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rorw</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rorw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>andn</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-andn"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>orn</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-orn"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>xnor</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-xnor"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>pack</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-pack"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>packh</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-packh"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>packw</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-packw"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rev.b</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-revb"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="left" valign="top"><simpara>rev8</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-rev8"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="left" valign="top"><simpara>zip</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-zip"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>&#10003;</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="left" valign="top"><simpara>unzip</simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="insns-unzip"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</chapter>
<chapter xml:id="insns" xreflabel="Instructions (in alphabetical order)">
<title>Instructions (in alphabetical order)</title>
<section xml:id="insns-add_uw" xreflabel="Add unsigned word">
<title>add.uw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Add unsigned word</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Pseudoinstructions</term>
<listitem>
<simpara>zext.w <emphasis>rd</emphasis>, <emphasis>rs1</emphasis> &#8594; add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, zero</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: Could not find the 'WaveDromEditor' executable in PATH; add it to the PATH or specify its location using the 'WaveDromEditor' document attribute
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x0, attr: ['ADD.UW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x04, attr: ['ADD.UW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs an XLEN-wide addition between <emphasis>rs2</emphasis> and the zero-extended least-significant word of <emphasis>rs1</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let base = X(rs2);
let index = EXTZ(X(rs1)[31..0]);

X(rd) = base + index;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-andn" xreflabel="AND with inverted operand">
<title>andn</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>AND with inverted operand</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>andn <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x7, attr: ['ANDN']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x20, attr: ['ANDN'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs the bitwise logical AND operation between <emphasis>rs1</emphasis> and the bitwise inversion of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = X(rs1) &amp; ~X(rs2);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-bclr" xreflabel="Single-Bit Clear (Register)">
<title>bclr</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Clear (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>bclr <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BCLR'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x24, attr: ['BCLR/BEXT'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns <emphasis>rs1</emphasis> with a single bit cleared at the index specified in <emphasis>rs2</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = X(rs2) &amp; (XLEN - 1);
X(rd) = X(rs1) &amp; ~(1 &lt;&lt; index)</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-bclri" xreflabel="Single-Bit Clear (Immediate)">
<title>bclri</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Clear (Immediate)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>bclri <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BCLRI'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'shamt' },
    { bits:  7, name: 0x24, attr: ['BCLRI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BCLRI'] },
    { bits:  5, name: 'rs1' },
    { bits:  6, name: 'shamt' },
    { bits:  6, name: 0x12, attr: ['BCLRI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns <emphasis>rs1</emphasis> with a single bit cleared at the index specified in <emphasis>shamt</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>shamt</emphasis>.
For RV32, the encodings corresponding to shamt[5]=1 are reserved.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = shamt &amp; (XLEN - 1);
X(rd) = X(rs1) &amp; ~(1 &lt;&lt; index)</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-bext" xreflabel="Single-Bit Extract (Register)">
<title>bext</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Extract (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>bext <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['BEXT'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x24, attr: ['BCLR/BEXT'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns a single bit extracted from <emphasis>rs1</emphasis> at the index specified in <emphasis>rs2</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = X(rs2) &amp; (XLEN - 1);
X(rd) = (X(rs1) &gt;&gt; index) &amp; 1;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-bexti" xreflabel="Single-Bit Extract (Immediate)">
<title>bexti</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Extract (Immediate)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>bexti <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['BEXTI'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'shamt' },
    { bits:  7, name: 0x24, attr: ['BEXTI/BCLRI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['BEXTI'] },
    { bits:  5, name: 'rs1' },
    { bits:  6, name: 'shamt' },
    { bits:  6, name: 0x12, attr: ['BEXTI/BCLRI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns a single bit extracted from <emphasis>rs1</emphasis> at the index specified in <emphasis>rs2</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>shamt</emphasis>.
For RV32, the encodings corresponding to shamt[5]=1 are reserved.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = shamt &amp; (XLEN - 1);
X(rd) = (X(rs1) &gt;&gt; index) &amp; 1;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-binv" xreflabel="Single-Bit Invert (Register)">
<title>binv</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Invert (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>binv <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BINV'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x34, attr: ['BINV'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns <emphasis>rs1</emphasis> with a single bit inverted at the index specified in <emphasis>rs2</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = X(rs2) &amp; (XLEN - 1);
X(rd) = X(rs1) ^ (1 &lt;&lt; index)</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-binvi" xreflabel="Single-Bit Invert (Immediate)">
<title>binvi</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Invert (Immediate)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>binvi <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BINV'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'shamt' },
    { bits:  7, name: 0x34, attr: ['BINVI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BINV'] },
    { bits:  5, name: 'rs1' },
    { bits:  6, name: 'shamt' },
    { bits:  6, name: 0x1a, attr: ['BINVI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns <emphasis>rs1</emphasis> with a single bit inverted at the index specified in <emphasis>shamt</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>shamt</emphasis>.
For RV32, the encodings corresponding to shamt[5]=1 are reserved.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = shamt &amp; (XLEN - 1);
X(rd) = X(rs1) ^ (1 &lt;&lt; index)</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-bset" xreflabel="Single-Bit Set (Register)">
<title>bset</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Set (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>bset <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>,<emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BSET'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x14, attr: ['BSET'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns <emphasis>rs1</emphasis> with a single bit set at the index specified in <emphasis>rs2</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = X(rs2) &amp; (XLEN - 1);
X(rd) = X(rs1) | (1 &lt;&lt; index)</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-bseti" xreflabel="Single-Bit Set (Immediate)">
<title>bseti</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Single-Bit Set (Immediate)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>bseti <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>,<emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BSETI'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'shamt' },
    { bits:  7, name: 0x14, attr: ['BSETI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['BSETI'] },
    { bits:  5, name: 'rs1' },
    { bits:  6, name: 'shamt' },
    { bits:  6, name: 0x0a, attr: ['BSETI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns <emphasis>rs1</emphasis> with a single bit set at the index specified in <emphasis>shamt</emphasis>.
The index is read from the lower log2(XLEN) bits of <emphasis>shamt</emphasis>.
For RV32, the encodings corresponding to shamt[5]=1 are reserved.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let index = shamt &amp; (XLEN - 1);
X(rd) = X(rs1) | (1 &lt;&lt; index)</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbs (<xref linkend="zbs"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-clmul" xreflabel="Carry-less multiply (low-part)">
<title>clmul</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Carry-less multiply (low-part)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>clmul <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CLMUL'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x5, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>clmul produces the lower half of the 2·XLEN carry-less product.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);
let output : xlenbits = 0;

foreach (i from 0 to (xlen - 1) by 1) {
   output = if   ((rs2_val &gt;&gt; i) &amp; 1)
            then output ^ (rs1_val &lt;&lt; i);
            else output;
}

X[rd] = output</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbc (<xref linkend="zbc"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkc (<xref linkend="zbkc"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-clmulh" xreflabel="Carry-less multiply (high-part)">
<title>clmulh</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Carry-less multiply (high-part)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>clmulh <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x3, attr: ['CLMULH'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x5, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>clmulh produces the upper half of the 2·XLEN carry-less product.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);
let output : xlenbits = 0;

foreach (i from 1 to xlen by 1) {
   output = if   ((rs2_val &gt;&gt; i) &amp; 1)
            then output ^ (rs1_val &gt;&gt; (xlen - i));
            else output;
}

X[rd] = output</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbc (<xref linkend="zbc"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkc (<xref linkend="zbkc"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-clmulr" xreflabel="Carry-less multiply (reversed)">
<title>clmulr</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Carry-less multiply (reversed)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>clmulr <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x2, attr: ['CLMULR'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x5, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara><emphasis role="strong">clmulr</emphasis> produces bits 2·XLEN−2:XLEN-1 of the 2·XLEN carry-less
product.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);
let output : xlenbits = 0;

foreach (i from 0 to (xlen - 1) by 1) {
   output = if   ((rs2_val &gt;&gt; i) &amp; 1)
            then output ^ (rs1_val &gt;&gt; (xlen - i - 1));
            else output;
}

X[rd] = output</programlisting>
<note>
<title>Note</title>
<simpara>The <emphasis role="strong">clmulr</emphasis> instruction is used to accelerate CRC calculations.
The <emphasis role="strong">r</emphasis> in the instruction&#8217;s mnemonic stands for <emphasis>reversed</emphasis>, as the
instruction is equivalent to bit-reversing the inputs, performing
a <emphasis role="strong">clmul</emphasis>, then bit-reversing the output.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbc (<xref linkend="zbc"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-clz" xreflabel="Count leading zero bits">
<title>clz</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Count leading zero bits</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>clz <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CLZ']  },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x0, attr: ['CLZ'] },
    { bits:  7, name: 0x30, attr: ['CLZ']  },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction counts the number of 0&#8217;s before the first 1, starting at the most-significant bit (i.e., XLEN-1) and progressing to bit 0. Accordingly, if the input is 0, the output is XLEN, and if the most-significant bit of the input is a 1, the output is 0.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">val HighestSetBit : forall ('N : Int), 'N &gt;= 0. bits('N) -&gt; int

function HighestSetBit x = {
  foreach (i from (xlen - 1) to 0 by 1 in dec)
    if [x[i]] == 0b1 then return(i) else ();
  return -1;
}

let rs = X(rs);
X[rd] = (xlen - 1) - HighestSetBit(rs);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-clzw" xreflabel="Count leading zero bits in word">
<title>clzw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Count leading zero bits in word</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>clzw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x1b, attr: ['OP-IMM-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CLZW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x0, attr: ['CLZW'] },
    { bits:  7, name: 0x30, attr: ['CLZW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction counts the number of 0&#8217;s before the first 1 starting at bit 31 and progressing to bit 0.
Accordingly, if the least-significant word is 0, the output is 32, and if the most-significant bit of the word (i.e., bit 31) is a 1, the output is 0.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">val HighestSetBit32 : forall ('N : Int), 'N &gt;= 0. bits('N) -&gt; int

function HighestSetBit32 x = {
  foreach (i from 31 to 0 by 1 in dec)
    if [x[i]] == 0b1 then return(i) else ();
  return -1;
}

let rs = X(rs);
X[rd] = 31 - HighestSetBit(rs);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-cpop" xreflabel="Count set bits">
<title>cpop</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Count set bits</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>cpop <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CPOP'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x2, attr: ['CPOP'] },
    { bits:  7, name: 0x30, attr: ['CPOP'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instructions counts the number of 1&#8217;s (i.e., set bits) in the source register.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let bitcount = 0;
let rs = X(rs);

foreach (i from 0 to (xlen - 1) in inc)
    if rs[i] == 0b1 then bitcount = bitcount + 1 else ();

X[rd] = bitcount</programlisting>
<note>
<title>Software Hint</title>
<simpara>This operations is known as population count, popcount, sideways sum, bit summation, or Hamming weight.</simpara>
<simpara>The GCC builtin function <literal>__builtin_popcount (unsigned int x)</literal> is implemented by cpop on RV32 and by <emphasis role="strong">cpopw</emphasis> on RV64.
The GCC builtin function <literal>__builtin_popcountl (unsigned long x)</literal> for LP64 is implemented by <emphasis role="strong">cpop</emphasis> on RV64.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-cpopw" xreflabel="Count set bits in word">
<title>cpopw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Count set bits in word</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>cpopw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x1b, attr: ['OP-IMM-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CPOPW'] },
    { bits:  5, name: 'rs' },
    { bits:  5, name: 0x2, attr: ['CPOPW'] },
    { bits:  7, name: 0x30, attr: ['CPOPW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instructions counts the number of 1&#8217;s (i.e., set bits) in the least-significant word of the source register.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let bitcount = 0;
let val = X(rs);

foreach (i from 0 to 31 in inc)
    if val[i] == 0b1 then bitcount = bitcount + 1 else ();

X[rd] = bitcount</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-ctz" xreflabel="Count trailing zero bits">
<title>ctz</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Count trailing zeros</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>ctz <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CTZ/CTZW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x1, attr: ['CTZ/CTZW'] },
    { bits:  7, name: 0x30, attr: ['CTZ/CTZW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction counts the number of 0&#8217;s before the first 1, starting at the least-significant bit (i.e., 0) and progressing to the most-significant bit (i.e., XLEN-1).
Accordingly, if the input is 0, the output is XLEN, and if the least-significant bit of the input is a 1, the output is 0.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">val LowestSetBit : forall ('N : Int), 'N &gt;= 0. bits('N) -&gt; int

function LowestSetBit x = {
  foreach (i from 0 to (xlen - 1) by 1 in dec)
    if [x[i]] == 0b1 then return(i) else ();
  return xlen;
}

let rs = X(rs);
X[rd] = LowestSetBit(rs);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-ctzw" xreflabel="Count trailing zero bits in word">
<title>ctzw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Count trailing zero bits in word</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>ctzw <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x1b, attr: ['OP-IMM-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['CTZ/CTZW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x1, attr: ['CTZ/CTZW'] },
    { bits:  7, name: 0x30, attr: ['CTZ/CTZW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction counts the number of 0&#8217;s before the first 1, starting at the least-significant bit (i.e., 0) and progressing to the most-significant bit of the least-significant word (i.e., 31). Accordingly, if the least-significant word is 0, the output is 32, and if the least-significant bit of the input is a 1, the output is 0.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">val LowestSetBit32 : forall ('N : Int), 'N &gt;= 0. bits('N) -&gt; int

function LowestSetBit32 x = {
  foreach (i from 0 to 31 by 1 in dec)
    if [x[i]] == 0b1 then return(i) else ();
  return 32;
}

let rs = X(rs);
X[rd] = LowestSetBit32(rs);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-max" xreflabel="Maximum">
<title>max</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Maximum</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>max <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x6, attr: ['MAX']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x05, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns the larger of two signed integers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);

let result = if   rs1_val &lt;_s rs2_val
             then rs2_val
             else rs1_val;

X(rd) = result;</programlisting>
<note>
<title>Software Hint</title>
<simpara>Calculating the absolute value of a signed integer can be performed
using the following sequence: <emphasis role="strong">neg rD,rS</emphasis> followed by <emphasis role="strong">max
rD,rS,rD</emphasis>. When using this common sequence, it is suggested that they
are scheduled with no intervening instructions so that
implementations that are so optimized can fuse them together.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-maxu" xreflabel="Unsigned maximum">
<title>maxu</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Unsigned maximum</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>maxu <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x7, attr: ['MAXU']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x05, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns the larger of two unsigned integers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);

let result = if   rs1_val &lt;_u rs2_val
             then rs2_val
             else rs1_val;

X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-min" xreflabel="Minimum">
<title>min</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Minimum</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>min <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x4, attr: ['MIN']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x05, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns the smaller of two signed integers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);

let result = if   rs1_val &lt;_s rs2_val
             then rs1_val
             else rs2_val;

X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-minu" xreflabel="Unsigned minimum">
<title>minu</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Unsigned minimum</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>minu <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['MINU']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x05, attr: ['MINMAX/CLMUL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction returns the smaller of two unsigned integers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_val = X(rs1);
let rs2_val = X(rs2);

let result = if   rs1_val &lt;_u rs2_val
             then rs1_val
             else rs2_val;

X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-orc_b" xreflabel="Bitwise OR-Combine, byte granule">
<title>orc.b</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Bitwise OR-Combine, byte granule</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>orc.b <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5 },
    { bits:  5, name: 'rs' },
    { bits: 12, name: 0x287 }
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>Combines the bits within each byte using bitwise logical OR.
This sets the bits of each byte in the result <emphasis>rd</emphasis> to all zeros if no bit within the respective byte of <emphasis>rs</emphasis> is set, or to all ones if any bit within the respective byte of <emphasis>rs</emphasis> is set.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let input = X(rs);
let output : xlenbits = 0;

foreach (i from 0 to (xlen - 8) by 8) {
   output[(i + 7)..i] = if   input[(i + 7)..i] == 0
                        then 0b00000000
                        else 0b11111111;
}

X[rd] = output;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-orn" xreflabel="OR with inverted operand">
<title>orn</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>OR with inverted operand</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>orn <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x6, attr: ['ORN']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x20, attr: ['ORN'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs the bitwise logical OR operation between <emphasis>rs1</emphasis> and the bitwise inversion of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = X(rs1) | ~X(rs2);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-pack" xreflabel="Pack low halves of registers">
<title>pack</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Pack the low halves of <emphasis>rs1</emphasis> and <emphasis>rs2</emphasis> into <emphasis>rd</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>pack <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    {bits:  7, name: 0x33, attr: ['OP'] },
    {bits: 5, name: 'rd'},
    {bits: 3, name: 0x4, attr:['PACK']},
    {bits: 5, name: 'rs1'},
    {bits: 5, name: 'rs2'},
    {bits: 7, name: 0x4, attr:['PACK']},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>The pack instruction packs the XLEN/2-bit lower halves of <emphasis>rs1</emphasis> and <emphasis>rs2</emphasis> into
<emphasis>rd</emphasis>, with <emphasis>rs1</emphasis> in the lower half and <emphasis>rs2</emphasis> in the upper half.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let lo_half : bits(xlen/2) = X(rs1)[xlen/2-1..0];
let hi_half : bits(xlen/2) = X(rs2)[xlen/2-1..0];
X(rd) = EXTZ(hi_half @ lo_half);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-packh" xreflabel="Pack low bytes of registers">
<title>packh</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Pack the low bytes of <emphasis>rs1</emphasis> and <emphasis>rs2</emphasis> into <emphasis>rd</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>packh <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    {bits:  7, name: 0x33, attr: ['OP'] },
    {bits: 5, name: 'rd'},
    {bits: 3, name: 0x7, attr: ['PACKH']},
    {bits: 5, name: 'rs1'},
    {bits: 5, name: 'rs2'},
    {bits: 7, name: 0x4, attr: ['PACKH']},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>And the packh instruction packs the least-significant bytes of
<emphasis>rs1</emphasis> and <emphasis>rs2</emphasis> into the 16 least-significant bits of <emphasis>rd</emphasis>,
zero extending the rest of <emphasis>rd</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let lo_half : bits(8) = X(rs1)[7..0];
let hi_half : bits(8) = X(rs2)[7..0];
X(rd) = EXTZ(hi_half @ lo_half);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-packw" xreflabel="Pack low 16-bits of registers (RV64)">
<title>packw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Pack the low 16-bits of <emphasis>rs1</emphasis> and <emphasis>rs2</emphasis> into <emphasis>rd</emphasis> on RV64.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>packw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
{bits: 2, name: 0x3},
{bits: 5, name: 0xe},
{bits: 5, name: 'rd'},
{bits: 3, name: 0x4},
{bits: 5, name: 'rs1'},
{bits: 5, name: 'rs2'},
{bits: 7, name: 0x4},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction packs the low 16 bits of
<emphasis>rs1</emphasis> and <emphasis>rs2</emphasis> into the 32 least-significant bits of <emphasis>rd</emphasis>,
sign extending the 32-bit result to the rest of <emphasis>rd</emphasis>.
This instruction only exists on RV64 based systems.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let lo_half : bits(16) = X(rs1)[15..0];
let hi_half : bits(16) = X(rs2)[15..0];
X(rd) = EXTS(hi_half @ lo_half);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-rev8" xreflabel="Byte-reverse register">
<title>rev8</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Byte-reverse register</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>rev8 <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5 },
    { bits:  5, name: 'rs' },
    { bits: 12, name: 0x698 }
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5 },
    { bits:  5, name: 'rs' },
    { bits: 12, name: 0x6b8 }
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction reverses the order of the bytes in <emphasis>rs</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let input = X(rs);
let output : xlenbits = 0;
let j = xlen - 1;

foreach (i from 0 to (xlen - 8) by 8) {
   output[i..(i + 7)] = input[(j - 7)..j];
   j = j - 8;
}

X[rd] = output</programlisting>
<note>
<title>Note</title>
<simpara>The <emphasis role="strong">rev8</emphasis> mnemonic corresponds to different instruction encodings in RV32 and RV64.</simpara>
</note>
<note>
<title>Software Hint</title>
<simpara>The byte-reverse operation is only available for the full register
width.  To emulate word-sized and halfword-sized byte-reversal,
perform a <literal>rev8 rd,rs</literal> followed by a <literal>srai rd,rd,K</literal>, where K is
XLEN-32 and XLEN-16, respectively.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-revb" xreflabel="Reverse bits in bytes">
<title>rev.b</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Reverse the bits in each byte of a source register.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>rev.b <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5 },
    { bits:  5, name: 'rs' },
    { bits: 12, name: 0x687 }
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction reverses the order of the bits in every byte of a register.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">result : xlenbits = EXTZ(0b0);
foreach (i from 0 to sizeof(xlen) by 8) {
    result[i+7..i] = reverse_bits_in_byte(X(rs1)[i+7..i]);
};
X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-rol" xreflabel="Rotate left (Register)">
<title>rol</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Rotate Left (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>rol <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['ROL']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x30, attr: ['ROL'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs a rotate left of <emphasis>rs1</emphasis> by the amount in least-significant log2(XLEN) bits of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let shamt = if   xlen == 32
            then X(rs2)[4..0]
            else X(rs2)[5..0];
let result = (X(rs1) &lt;&lt; shamt) | (X(rs1) &gt;&gt; (xlen - shamt));

X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-rolw" xreflabel="Rotate Left Word (Register)">
<title>rolw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Rotate Left Word (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>rolw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['ROLW']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x30, attr: ['ROLW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs a rotate left on the least-significant word of  <emphasis>rs1</emphasis> by the amount in least-significant 5 bits of <emphasis>rs2</emphasis>.
The resulting word value is sign-extended by copying bit 31 to all of the more-significant bits.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1 = EXTZ(X(rs1)[31..0])
let shamt = X(rs2)[4..0];
let result = (rs1 &lt;&lt; shamt) | (rs1 &gt;&gt; (32 - shamt));
X(rd) = EXTS(result[31..0]);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-ror" xreflabel="Rotate right (Register)">
<title>ror</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Rotate Right</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>ror <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['ROR']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x30, attr: ['ROR'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs a rotate right of <emphasis>rs1</emphasis> by the amount in least-significant log2(XLEN) bits of <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let shamt = if   xlen == 32
            then X(rs2)[4..0]
            else X(rs2)[5..0];
let result = (X(rs1) &gt;&gt; shamt) | (X(rs1) &lt;&lt; (xlen - shamt));

X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-rori" xreflabel="Rotate right (Immediate)">
<title>rori</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Rotate Right (Immediate)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>rori <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['RORI']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'shamt' },
    { bits:  7, name: 0x30, attr: ['RORI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['RORI']},
    { bits:  5, name: 'rs1' },
    { bits:  6, name: 'shamt' },
    { bits:  6, name: 0x18, attr: ['RORI'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs a rotate right of <emphasis>rs1</emphasis> by the amount in the least-significant log2(XLEN) bits of <emphasis>shamt</emphasis>.
For RV32, the encodings corresponding to shamt[5]=1 are reserved.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let shamt = if   xlen == 32
            then shamt[4..0]
            else shamt[5..0];
let result = (X(rs1) &gt;&gt; shamt) | (X(rs1) &lt;&lt; (xlen - shamt));

X(rd) = result;</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-roriw" xreflabel="Rotate right Word (Immediate)">
<title>roriw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Rotate Right Word by Immediate</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>roriw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x1b, attr: ['OP-IMM-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['RORIW']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'shamt' },
    { bits:  7, name: 0x30, attr: ['RORIW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs a rotate right on the least-significant word
of <emphasis>rs1</emphasis> by the amount in the least-significant log2(XLEN) bits of
<emphasis>shamt</emphasis>.
The resulting word value is sign-extended by copying bit 31 to all of
the more-significant bits.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1_data = EXTZ(X(rs1)[31..0];
let result = (rs1_data &gt;&gt; shamt) | (rs1_data &lt;&lt; (32 - shamt));
X(rd) = EXTS(result[31..0]);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-rorw" xreflabel="Rotate right Word (Register)">
<title>rorw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Rotate Right Word (Register)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>rorw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x5, attr: ['RORW']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x30, attr: ['RORW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs a rotate right on the least-significant word of  <emphasis>rs1</emphasis> by the amount in least-significant 5 bits of <emphasis>rs2</emphasis>.
The resultant word is sign-extended by copying bit 31 to all of the more-significant bits.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let rs1 = EXTZ(X(rs1)[31..0])
let shamt = X(rs2)[4..0];
let result = (rs1 &gt;&gt; shamt) | (rs1 &lt;&lt; (32 - shamt));
X(rd) = EXTS(result);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sext_b" xreflabel="Sign-extend byte">
<title>sext.b</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Sign-extend byte</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sext.b <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['SEXT.B/SEXT.H'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x04, attr: ['SEXT.B'] },
    { bits:  7, name: 0x30 },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction sign-extends the least-significant byte in the source to XLEN by copying the most-significant bit in the byte (i.e., bit 7) to all of the more-significant bits.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = EXTS(X(rs)[7..0]);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sext_h" xreflabel="Sign-extend halfword">
<title>sext.h</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Sign-extend halfword</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sext.h <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x13, attr: ['OP-IMM'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['SEXT.B/SEXT.H'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 0x05, attr: ['SEXT.H'] },
    { bits:  7, name: 0x30 },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction sign-extends the least-significant halfword in <emphasis>rs</emphasis> to XLEN by copying the most-significant bit in the halfword (i.e., bit 15) to all of the more-significant bits.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = EXTS(X(rs)[15..0]);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sh1add" xreflabel="Shift left by 1 and add">
<title>sh1add</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift left by 1 and add</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sh1add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x2, attr: ['SH1ADD'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x10, attr: ['SH1ADD'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction shifts <emphasis>rs1</emphasis> to the left by 1 bit and adds it to <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = X(rs2) + (X(rs1) &lt;&lt; 1);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sh1add_uw" xreflabel="Shift unsigned word left by 1 and add">
<title>sh1add.uw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift unsigned word left by 1 and add</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sh1add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x2, attr: ['SH1ADD.UW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x10, attr: ['SH1ADD.UW']  },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs an XLEN-wide addition of two addends.
The first addend is <emphasis>rs2</emphasis>. The second addend is the unsigned value formed by extracting the least-significant word of <emphasis>rs1</emphasis> and shifting it left by 1 place.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let base = X(rs2);
let index = EXTZ(X(rs1)[31..0]);

X(rd) = base + (index &lt;&lt; 1);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sh2add" xreflabel="Shift left by 2 and add">
<title>sh2add</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift left by 2 and add</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sh2add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x4, attr: ['SH2ADD'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x10, attr: ['SH2ADD'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction shifts <emphasis>rs1</emphasis> to the left by 2 places and adds it to <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = X(rs2) + (X(rs1) &lt;&lt; 2);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sh2add_uw" xreflabel="Shift unsigned word left by 2 and add">
<title>sh2add.uw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift unsigned word left by 2 and add</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sh2add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x4, attr: ['SH2ADD.UW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x10, attr: ['SH2ADD.UW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs an XLEN-wide addition of two addends.
The first addend is <emphasis>rs2</emphasis>.
The second addend is the unsigned value formed by extracting the least-significant word of <emphasis>rs1</emphasis> and shifting it left by 2 places.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let base = X(rs2);
let index = EXTZ(X(rs1)[31..0]);

X(rd) = base + (index &lt;&lt; 2);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sh3add" xreflabel="Shift left by 3 and add">
<title>sh3add</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift left by 3 and add</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sh3add <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x6, attr: ['SH3ADD'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x10, attr: ['SH3ADD'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction shifts <emphasis>rs1</emphasis> to the left by 3 places and adds it to <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = X(rs2) + (X(rs1) &lt;&lt; 3);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-sh3add_uw" xreflabel="Shift unsigned word left by 3 and add">
<title>sh3add.uw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift unsigned word left by 3 and add</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>sh3add.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x6, attr: ['SH3ADD.UW'] },
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x10, attr: ['SH3ADD.UW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs an XLEN-wide addition of two addends. The first addend is <emphasis>rs2</emphasis>. The second addend is the unsigned value formed by extracting the least-significant word of <emphasis>rs1</emphasis> and shifting it left by 3 places.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">let base = X(rs2);
let index = EXTZ(X(rs1)[31..0]);

X(rd) = base + (index &lt;&lt; 3);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-slli_uw" xreflabel="Shift-left unsigned word (Immediate)">
<title>slli.uw</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Shift-left unsigned word (Immediate)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>slli.uw <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>shamt</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x1b, attr: ['OP-IMM-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x1, attr: ['SLLI.UW'] },
    { bits:  5, name: 'rs1' },
    { bits:  6, name: 'shamt' },
    { bits:  6, name: 0x02, attr: ['SLLI.UW'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction takes the least-significant word of <emphasis>rs1</emphasis>, zero-extends it, and shifts it left by the immediate.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = (EXTZ(X(rs)[31..0]) &lt;&lt; shamt);</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zba (<xref linkend="zba"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<title>Architecture Explanation</title>
<simpara>This instruction is the same as <emphasis role="strong">slli</emphasis> with <emphasis role="strong">zext.w</emphasis> performed on <emphasis>rs1</emphasis> before shifting.</simpara>
</note>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-unzip" xreflabel="Bit deinterleave">
<title>unzip</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Implements the inverse of the zip instruction.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>unzip <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
{bits: 2, name: 0x3},
{bits: 5, name: 0x4},
{bits: 5, name: 'rd'},
{bits: 3, name: 0x5},
{bits: 5, name: 'rs1'},
{bits: 5, name: 0x1f},
{bits: 7, name: 0x4},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction gathers bits from the high and low halves of the source
word into odd/even bit positions in the destination word.
It is the inverse of the <link linkend="insns-zip">zip</link> instruction.
This instruction is available only on RV32.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">foreach (i from 0 to xlen/2-1) {
  X(rd)[i] = X(rs1)[2*i]
  X(rd)[i+xlen/2] = X(rs1)[2*i+1]
}</programlisting>
<note>
<title>Software Hint</title>
<simpara>This instruction is useful for implementing the SHA3 cryptographic
hash function on a 32-bit architecture, as it implements the
bit-interleaving operation used to speed up the 64-bit rotations
directly.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>) (RV32)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-xnor" xreflabel="Exclusive NOR">
<title>xnor</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Exclusive NOR</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>xnor <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x4, attr: ['XNOR']},
    { bits:  5, name: 'rs1' },
    { bits:  5, name: 'rs2' },
    { bits:  7, name: 0x20, attr: ['XNOR'] },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction performs the bit-wise exclusive-NOR operation on <emphasis>rs1</emphasis> and <emphasis>rs2</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = ~(X(rs1) ^ X(rs2));</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-xpermb" xreflabel="Crossbar permutation (bytes)">
<title>xperm.b</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Byte-wise lookup of indices into a vector in registers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>xperm.b <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
{bits: 2, name: 0x3},
{bits: 5, name: 0xc},
{bits: 5, name: 'rd'},
{bits: 3, name: 0x4},
{bits: 5, name: 'rs1'},
{bits: 5, name: 'rs2'},
{bits: 7, name: 0x14},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>The xperm.b instruction operates on bytes.
The <emphasis>rs1</emphasis> register contains a vector of XLEN/8 8-bit elements.
The <emphasis>rs2</emphasis> register contains a vector of XLEN/8 8-bit indexes.
The result is each element in <emphasis>rs2</emphasis> replaced by the indexed element in <emphasis>rs1</emphasis>,
or zero if the index into <emphasis>rs2</emphasis> is out of bounds.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">val xpermb_lookup : (bits(8), xlenbits) -&gt; bits(8)
function xpermb_lookup (idx, lut) = {
    (lut &gt;&gt; (idx @ 0b000))[7..0]
}

function clause execute ( XPERM_B (rs2,rs1,rd)) = {
    result : xlenbits = EXTZ(0b0);
    foreach(i from 0 to xlen by 8) {
        result[i+7..i] = xpermn_lookup(X(rs2)[i+7..i], X(rs1));
    };
    X(rd) = result;
    RETIRE_SUCCESS
}</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkx (<xref linkend="zbkx"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-xpermn" xreflabel="Crossbar permutation (nibbles)">
<title>xperm.n</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Nibble-wise lookup of indices into a vector.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>xperm.n <emphasis>rd</emphasis>, <emphasis>rs1</emphasis>, <emphasis>rs2</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
{bits: 2, name: 0x3},
{bits: 5, name: 0xc},
{bits: 5, name: 'rd'},
{bits: 3, name: 0x2},
{bits: 5, name: 'rs1'},
{bits: 5, name: 'rs2'},
{bits: 7, name: 0x14},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>The xperm.n instruction operates on nibbles.
The <emphasis>rs1</emphasis> register contains a vector of XLEN/4 4-bit elements.
The <emphasis>rs2</emphasis> register contains a vector of XLEN/4 4-bit indexes.
The result is each element in <emphasis>rs2</emphasis> replaced by the indexed element in <emphasis>rs1</emphasis>,
or zero if the index into <emphasis>rs2</emphasis> is out of bounds.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">val xpermn_lookup : (bits(4), xlenbits) -&gt; bits(4)
function xpermn_lookup (idx, lut) = {
    (lut &gt;&gt; (idx @ 0b00))[3..0]
}

function clause execute ( XPERM_N (rs2,rs1,rd)) = {
    result : xlenbits = EXTZ(0b0);
    foreach(i from 0 to xlen by 4) {
        result[i+3..i] = xpermn_lookup(X(rs2)[i+3..i], X(rs1));
    };
    X(rd) = result;
    RETIRE_SUCCESS
}</programlisting>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkx (<xref linkend="zbkx"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-zext_h" xreflabel="Zero-extend halfword">
<title>zext.h</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Zero-extend halfword</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>zext.h <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding (RV32)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x33, attr: ['OP'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x4, attr: ['ZEXT.H']},
    { bits:  5, name: 'rs' },
    { bits:  5, name: 0x00 },
    { bits:  7, name: 0x04 },
]}</screen>
<variablelist>
<varlistentry>
<term>Encoding (RV64)</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
    { bits:  7, name: 0x3b, attr: ['OP-32'] },
    { bits:  5, name: 'rd' },
    { bits:  3, name: 0x4, attr: ['ZEXT.H']},
    { bits:  5, name: 'rs' },
    { bits:  5, name: 0x00 },
    { bits:  7, name: 0x04 },
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction zero-extends the least-significant halfword of the source to XLEN by inserting 0&#8217;s into all of the bits more significant than 15.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">X(rd) = EXTZ(X(rs)[15..0]);</programlisting>
<note>
<title>Note</title>
<simpara>The <emphasis role="strong">zext.h</emphasis> mnemonic corresponds to different instruction encodings in RV32 and RV64.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbb (<xref linkend="zbb"/>)</simpara></entry>
<entry align="left" valign="top"><simpara>0.93</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><?asciidoc-pagebreak?></simpara>
</section>
<section xml:id="insns-zip" xreflabel="Bit interleave">
<title>zip</title>
<variablelist>
<varlistentry>
<term>Synopsis</term>
<listitem>
<simpara>Gather odd and even bits of the source word into upper/lower halves of the
destination.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Mnemonic</term>
<listitem>
<simpara>zip <emphasis>rd</emphasis>, <emphasis>rs</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Encoding</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>Failed to generate image: no implicit conversion of nil into String
{reg:[
{bits: 2, name: 0x3},
{bits: 5, name: 0x4},
{bits: 5, name: 'rd'},
{bits: 3, name: 0x1},
{bits: 5, name: 'rs1'},
{bits: 5, name: 0x1e},
{bits: 7, name: 0x4},
]}</screen>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>This instruction scatters all of the odd and even bits of a source word into
the high and low halves of a destination word.
It is the inverse of the <link linkend="insns-unzip">unzip</link> instruction.
This instruction is available only on RV32.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Operation</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="sail" linenumbering="unnumbered">foreach (i from 0 to xlen/2-1) {
  X(rd)[2*i] = X(rs1)[i]
  X(rd)[2*i+1] = X(rs1)[i+xlen/2]
}</programlisting>
<note>
<title>Software Hint</title>
<simpara>This instruction is useful for implementing the SHA3 cryptographic
hash function on a 32-bit architecture, as it implements the
bit-interleaving operation used to speed up the 64-bit rotations
directly.</simpara>
</note>
<variablelist>
<varlistentry>
<term>Included in</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Extension</entry>
<entry align="left" valign="top">Minimum version</entry>
<entry align="left" valign="top">Lifecycle state</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Zbkb (<xref linkend="zbkb"/>) (RV32)</simpara></entry>
<entry align="left" valign="top"><simpara>v0.9.4</simpara></entry>
<entry align="left" valign="top"><simpara>Frozen</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</chapter>
<appendix xml:id="_software_optimization_guide">
<title>Software optimization guide</title>
<section xml:id="_strlen">
<title>strlen</title>
<simpara>The <emphasis role="strong">orc.b</emphasis> instruction allows for the efficient detection of <emphasis role="strong">NUL</emphasis> bytes in an XLEN-sized chunk of data:</simpara>
<itemizedlist>
<listitem>
<simpara>the result of <emphasis role="strong">orc.b</emphasis> on a chunk that does not contain any <emphasis role="strong">NUL</emphasis> bytes will be all-ones, and</simpara>
</listitem>
<listitem>
<simpara>after a bitwise-negation of the result of <emphasis role="strong">orc.b</emphasis>, the number of data bytes before the  first <emphasis role="strong">NUL</emphasis> byte (if any) can be detected by <emphasis role="strong">ctz</emphasis>/<emphasis role="strong">clz</emphasis> (depending on the endianness of data).</simpara>
</listitem>
</itemizedlist>
<simpara>A full example of a <emphasis role="strong">strlen</emphasis> function, which uses these techniques and also demonstrates the use of it for unaligned/partial data, is the following:</simpara>
<programlisting language="asm" linenumbering="unnumbered">#include &lt;sys/asm.h&gt;

	.text
	.globl strlen
	.type  strlen, @function
strlen:
	andi	a3, a0, (SZREG-1)   // offset
	andi    a1, a0, -SZREG      // align pointer
.Lprologue:
	li      a4, SZREG
	sub     a4, a4, a3          // XLEN - offset
	slli	a3, a3, PTRLOG      // offset * 8
	REG_L   a2, 0(a1)           // chunk
	/*
	 * Shift the partial/unaligned chunk we loaded to remove the bytes
	 * from before the start of the string, adding NUL bytes at the end.
	 */
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
	srl	a2, a2 ,a3          // chunk &gt;&gt; (offset * 8)
#else
	sll     a2, a2, a3
#endif
	orc.b   a2, a2
	not	a2, a2
	/*
	 * Non-NUL bytes in the string have been expanded to 0x00, while
 	 * NUL bytes have become 0xff.  Search for the first set bit
	 * (corresponding to a NUL byte in the original chunk).
	 */
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
	ctz     a2, a2
#else
	clz     a2, a2
#endif
	/*
	 * The first chunk is special: compare against the number of valid
	 * bytes in this chunk.
	 */
	srli    a0, a2, 3
	bgtu    a4, a0, .Ldone
	addi    a3, a1, SZREG
	li      a4, -1
	.align 2
	/*
	 * Our critical loop is 4 instructions and processes data in 4 byte
	 * or 8 byte chunks.
	 */
.Lloop:
	REG_L   a2, SZREG(a1)
	addi    a1, a1, SZREG
	orc.b   a2, a2
	beq     a2, a4, .Lloop

.Lepilogue:
	not     a2, a2
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
	ctz     a2, a2
#else
	clz     a2, a2
#endif
	sub     a1, a1, a3
	add	a0, a0, a1
	srli    a2, a2, 3
	add 	a0, a0, a2
.Ldone:
	ret</programlisting>
</section>
<section xml:id="_strcmp">
<title>strcmp</title>
<programlisting language="asm" linenumbering="unnumbered">#include &lt;sys/asm.h&gt;

  .text
  .globl strcmp
  .type  strcmp, @function
strcmp:
  or    a4, a0, a1
  li    t2, -1
  and   a4, a4, SZREG-1
  bnez  a4, .Lsimpleloop

  # Main loop for aligned strings
.Lloop:
  REG_L a2, 0(a0)
  REG_L a3, 0(a1)
  orc.b t0, a2
  bne   t0, t2, .Lfoundnull
  addi  a0, a0, SZREG
  addi  a1, a1, SZREG
  beq   a2, a3, .Lloop

  # Words don't match, and no null byte in first word.
  # Get bytes in big-endian order and compare.
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
  rev8  a2, a2
  rev8  a3, a3
#endif
  # Synthesize (a2 &gt;= a3) ? 1 : -1 in a branchless sequence.
  sltu a0, a2, a3
  neg  a0, a0
  ori  a0, a0, 1
  ret

.Lfoundnull:
  # Found a null byte.
  # If words don't match, fall back to simple loop.
  bne   a2, a3, .Lsimpleloop

  # Otherwise, strings are equal.
  li    a0, 0
  ret

  # Simple loop for misaligned strings
.Lsimpleloop:
  lbu   a2, 0(a0)
  lbu   a3, 0(a1)
  addi  a0, a0, 1
  addi  a1, a1, 1
  bne   a2, a3, 1f
  bnez  a2, .Lsimpleloop

1:
  sub   a0, a2, a3
  ret

.size   strcmp, .-strcmp</programlisting>
</section>
</appendix>
</book>